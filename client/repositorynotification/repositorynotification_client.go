package repositorynotification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new repositorynotification API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repositorynotification API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*Create a new notification for the specified repository.
 */
func (a *Client) CreateRepoNotification(params CreateRepoNotificationParams, authInfo client.AuthInfoWriter) (*CreateRepoNotificationOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "createRepoNotification",
		Params:   &params,
		Reader:   &CreateRepoNotificationReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRepoNotificationOK), nil
}

/*Deletes the specified notification.
 */
func (a *Client) DeleteRepoNotification(params DeleteRepoNotificationParams, authInfo client.AuthInfoWriter) (*DeleteRepoNotificationNoContent, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "deleteRepoNotification",
		Params:   &params,
		Reader:   &DeleteRepoNotificationReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRepoNotificationNoContent), nil
}

/*Get information for the specified notification.
 */
func (a *Client) GetRepoNotification(params GetRepoNotificationParams, authInfo client.AuthInfoWriter) (*GetRepoNotificationOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "getRepoNotification",
		Params:   &params,
		Reader:   &GetRepoNotificationReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepoNotificationOK), nil
}

/*List the notifications for the specified repository.
 */
func (a *Client) ListRepoNotifications(params ListRepoNotificationsParams, authInfo client.AuthInfoWriter) (*ListRepoNotificationsOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "listRepoNotifications",
		Params:   &params,
		Reader:   &ListRepoNotificationsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRepoNotificationsOK), nil
}

/*Queues a test notification for this repository.
 */
func (a *Client) TestRepoNotification(params TestRepoNotificationParams, authInfo client.AuthInfoWriter) (*TestRepoNotificationOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "testRepoNotification",
		Params:   &params,
		Reader:   &TestRepoNotificationReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestRepoNotificationOK), nil
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
