package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new user API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*Star a repository.
 */
func (a *Client) CreateStar(params CreateStarParams, authInfo client.AuthInfoWriter) (*CreateStarOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "createStar",
		Params:   &params,
		Reader:   &CreateStarReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStarOK), nil
}

/*Removes a star from a repository.
 */
func (a *Client) DeleteStar(params DeleteStarParams) (*DeleteStarNoContent, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:     "deleteStar",
		Params: &params,
		Reader: &DeleteStarReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStarNoContent), nil
}

/*Get user information for the authenticated user.
 */
func (a *Client) GetLoggedInUser(params GetLoggedInUserParams, authInfo client.AuthInfoWriter) (*GetLoggedInUserOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "getLoggedInUser",
		Params:   &params,
		Reader:   &GetLoggedInUserReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLoggedInUserOK), nil
}

/*Get user information for the specified user.
 */
func (a *Client) GetUserInformation(params GetUserInformationParams) (*GetUserInformationOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:     "getUserInformation",
		Params: &params,
		Reader: &GetUserInformationReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserInformationOK), nil
}

/*List all starred repositories.
 */
func (a *Client) ListStarredRepos(params ListStarredReposParams) (*ListStarredReposOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:     "listStarredRepos",
		Params: &params,
		Reader: &ListStarredReposReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStarredReposOK), nil
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
