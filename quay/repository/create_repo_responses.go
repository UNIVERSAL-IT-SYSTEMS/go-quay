package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

type CreateRepoReader struct {
	formats strfmt.Registry
}

func (o *CreateRepoReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateRepoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateRepoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateRepoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateRepoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateRepoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateRepoOK creates a CreateRepoOK with default headers values
func NewCreateRepoOK() *CreateRepoOK {
	return &CreateRepoOK{}
}

/*CreateRepoOK

Successful invocation
*/
type CreateRepoOK struct {
}

func (o *CreateRepoOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository][%d] createRepoOK ", 200)
}

func (o *CreateRepoOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateRepoBadRequest creates a CreateRepoBadRequest with default headers values
func NewCreateRepoBadRequest() *CreateRepoBadRequest {
	return &CreateRepoBadRequest{}
}

/*CreateRepoBadRequest

Bad Request
*/
type CreateRepoBadRequest struct {
	Payload *models.GeneralError
}

func (o *CreateRepoBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository][%d] createRepoBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRepoBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRepoUnauthorized creates a CreateRepoUnauthorized with default headers values
func NewCreateRepoUnauthorized() *CreateRepoUnauthorized {
	return &CreateRepoUnauthorized{}
}

/*CreateRepoUnauthorized

Session required
*/
type CreateRepoUnauthorized struct {
}

func (o *CreateRepoUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository][%d] createRepoUnauthorized ", 401)
}

func (o *CreateRepoUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateRepoForbidden creates a CreateRepoForbidden with default headers values
func NewCreateRepoForbidden() *CreateRepoForbidden {
	return &CreateRepoForbidden{}
}

/*CreateRepoForbidden

Unauthorized access
*/
type CreateRepoForbidden struct {
}

func (o *CreateRepoForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository][%d] createRepoForbidden ", 403)
}

func (o *CreateRepoForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateRepoNotFound creates a CreateRepoNotFound with default headers values
func NewCreateRepoNotFound() *CreateRepoNotFound {
	return &CreateRepoNotFound{}
}

/*CreateRepoNotFound

Not found
*/
type CreateRepoNotFound struct {
}

func (o *CreateRepoNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository][%d] createRepoNotFound ", 404)
}

func (o *CreateRepoNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
