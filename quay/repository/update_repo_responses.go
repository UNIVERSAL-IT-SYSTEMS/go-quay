package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

type UpdateRepoReader struct {
	formats strfmt.Registry
}

func (o *UpdateRepoReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		var result UpdateRepoOK
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return &result, nil

	case 400:
		var result UpdateRepoBadRequest
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("updateRepoBadRequest", &result, response.Code())

	case 401:
		var result UpdateRepoUnauthorized
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("updateRepoUnauthorized", &result, response.Code())

	case 403:
		var result UpdateRepoForbidden
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("updateRepoForbidden", &result, response.Code())

	case 404:
		var result UpdateRepoNotFound
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("updateRepoNotFound", &result, response.Code())

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

/*UpdateRepoOK

Successful invocation
*/
type UpdateRepoOK struct {
}

func (o *UpdateRepoOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*UpdateRepoBadRequest

Bad Request
*/
type UpdateRepoBadRequest struct {
	Payload *models.GeneralError
}

func (o *UpdateRepoBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

/*UpdateRepoUnauthorized

Session required
*/
type UpdateRepoUnauthorized struct {
}

func (o *UpdateRepoUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*UpdateRepoForbidden

Unauthorized access
*/
type UpdateRepoForbidden struct {
}

func (o *UpdateRepoForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*UpdateRepoNotFound

Not found
*/
type UpdateRepoNotFound struct {
}

func (o *UpdateRepoNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
