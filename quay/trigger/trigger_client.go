package trigger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new trigger API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for trigger API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
Activate the specified build trigger.
*/
func (a *Client) ActivateBuildTrigger(params *ActivateBuildTriggerParams, authInfo client.AuthInfoWriter) (*ActivateBuildTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateBuildTriggerParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "activateBuildTrigger",
		Method:             "POST",
		PathPattern:        "/api/v1/repository/{repository}/trigger/{trigger_uuid}/activate",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivateBuildTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ActivateBuildTriggerOK), nil
}

/*
Delete the specified build trigger.
*/
func (a *Client) DeleteBuildTrigger(params *DeleteBuildTriggerParams, authInfo client.AuthInfoWriter) (*DeleteBuildTriggerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildTriggerParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "deleteBuildTrigger",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repository/{repository}/trigger/{trigger_uuid}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBuildTriggerNoContent), nil
}

/*
Get information for the specified build trigger.
*/
func (a *Client) GetBuildTrigger(params *GetBuildTriggerParams, authInfo client.AuthInfoWriter) (*GetBuildTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTriggerParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getBuildTrigger",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/trigger/{trigger_uuid}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBuildTriggerOK), nil
}

/*
List the triggers for the specified repository.
*/
func (a *Client) ListBuildTriggers(params *ListBuildTriggersParams, authInfo client.AuthInfoWriter) (*ListBuildTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBuildTriggersParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "listBuildTriggers",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/trigger/",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListBuildTriggersReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBuildTriggersOK), nil
}

/*
List the builds started by the specified trigger.
*/
func (a *Client) ListTriggerRecentBuilds(params *ListTriggerRecentBuildsParams, authInfo client.AuthInfoWriter) (*ListTriggerRecentBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTriggerRecentBuildsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "listTriggerRecentBuilds",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/trigger/{trigger_uuid}/builds",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTriggerRecentBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTriggerRecentBuildsOK), nil
}

/*
Manually start a build from the specified trigger.
*/
func (a *Client) ManuallyStartBuildTrigger(params *ManuallyStartBuildTriggerParams, authInfo client.AuthInfoWriter) (*ManuallyStartBuildTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManuallyStartBuildTriggerParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "manuallyStartBuildTrigger",
		Method:             "POST",
		PathPattern:        "/api/v1/repository/{repository}/trigger/{trigger_uuid}/start",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManuallyStartBuildTriggerReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ManuallyStartBuildTriggerOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
