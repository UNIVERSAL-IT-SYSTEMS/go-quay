package repositorynotification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

type DeleteRepoNotificationReader struct {
	formats strfmt.Registry
}

func (o *DeleteRepoNotificationReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		var result DeleteRepoNotificationNoContent
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return &result, nil

	case 400:
		var result DeleteRepoNotificationBadRequest
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("deleteRepoNotificationBadRequest", &result, response.Code())

	case 401:
		var result DeleteRepoNotificationUnauthorized
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("deleteRepoNotificationUnauthorized", &result, response.Code())

	case 403:
		var result DeleteRepoNotificationForbidden
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("deleteRepoNotificationForbidden", &result, response.Code())

	case 404:
		var result DeleteRepoNotificationNotFound
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("deleteRepoNotificationNotFound", &result, response.Code())

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

/*DeleteRepoNotificationNoContent

Deleted
*/
type DeleteRepoNotificationNoContent struct {
}

func (o *DeleteRepoNotificationNoContent) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeleteRepoNotificationBadRequest

Bad Request
*/
type DeleteRepoNotificationBadRequest struct {
	Payload *models.GeneralError
}

func (o *DeleteRepoNotificationBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

/*DeleteRepoNotificationUnauthorized

Session required
*/
type DeleteRepoNotificationUnauthorized struct {
}

func (o *DeleteRepoNotificationUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeleteRepoNotificationForbidden

Unauthorized access
*/
type DeleteRepoNotificationForbidden struct {
}

func (o *DeleteRepoNotificationForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeleteRepoNotificationNotFound

Not found
*/
type DeleteRepoNotificationNotFound struct {
}

func (o *DeleteRepoNotificationNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
