package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMatchingEntitiesParams creates a new GetMatchingEntitiesParams object
// with the default values initialized.
func NewGetMatchingEntitiesParams() *GetMatchingEntitiesParams {
	var ()
	return &GetMatchingEntitiesParams{}
}

/*GetMatchingEntitiesParams contains all the parameters to send to the API endpoint
for the get matching entities operation typically these are written to a http.Request
*/
type GetMatchingEntitiesParams struct {

	/*IncludeOrgs
	  Whether to include orgs names.

	*/
	IncludeOrgs *bool
	/*IncludeTeams
	  Whether to include team names.

	*/
	IncludeTeams *bool
	/*Namespace
	  Namespace to use when querying for org entities.

	*/
	Namespace *string
	/*Prefix*/
	Prefix string
}

// WithIncludeOrgs adds the includeOrgs to the get matching entities params
func (o *GetMatchingEntitiesParams) WithIncludeOrgs(IncludeOrgs *bool) *GetMatchingEntitiesParams {
	o.IncludeOrgs = IncludeOrgs
	return o
}

// WithIncludeTeams adds the includeTeams to the get matching entities params
func (o *GetMatchingEntitiesParams) WithIncludeTeams(IncludeTeams *bool) *GetMatchingEntitiesParams {
	o.IncludeTeams = IncludeTeams
	return o
}

// WithNamespace adds the namespace to the get matching entities params
func (o *GetMatchingEntitiesParams) WithNamespace(Namespace *string) *GetMatchingEntitiesParams {
	o.Namespace = Namespace
	return o
}

// WithPrefix adds the prefix to the get matching entities params
func (o *GetMatchingEntitiesParams) WithPrefix(Prefix string) *GetMatchingEntitiesParams {
	o.Prefix = Prefix
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetMatchingEntitiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	if o.IncludeOrgs != nil {

		// query param includeOrgs
		var qrIncludeOrgs bool
		if o.IncludeOrgs != nil {
			qrIncludeOrgs = *o.IncludeOrgs
		}
		qIncludeOrgs := swag.FormatBool(qrIncludeOrgs)
		if qIncludeOrgs != "" {
			if err := r.SetQueryParam("includeOrgs", qIncludeOrgs); err != nil {
				return err
			}
		}

	}

	if o.IncludeTeams != nil {

		// query param includeTeams
		var qrIncludeTeams bool
		if o.IncludeTeams != nil {
			qrIncludeTeams = *o.IncludeTeams
		}
		qIncludeTeams := swag.FormatBool(qrIncludeTeams)
		if qIncludeTeams != "" {
			if err := r.SetQueryParam("includeTeams", qIncludeTeams); err != nil {
				return err
			}
		}

	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string
		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {
			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}

	}

	// path param prefix
	if err := r.SetPathParam("prefix", o.Prefix); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
