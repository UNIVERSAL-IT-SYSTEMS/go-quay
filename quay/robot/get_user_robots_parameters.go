package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetUserRobotsParams creates a new GetUserRobotsParams object
// with the default values initialized.
func NewGetUserRobotsParams() *GetUserRobotsParams {
	var ()
	return &GetUserRobotsParams{}
}

/*GetUserRobotsParams contains all the parameters to send to the API endpoint
for the get user robots operation typically these are written to a http.Request
*/
type GetUserRobotsParams struct {

	/*Permissions
	  Whether to include repostories and teams in which the robots have permission.

	*/
	Permissions *bool
}

// WithPermissions adds the permissions to the get user robots params
func (o *GetUserRobotsParams) WithPermissions(Permissions *bool) *GetUserRobotsParams {
	o.Permissions = Permissions
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserRobotsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	if o.Permissions != nil {

		// query param permissions
		var qrPermissions bool
		if o.Permissions != nil {
			qrPermissions = *o.Permissions
		}
		qPermissions := swag.FormatBool(qrPermissions)
		if qPermissions != "" {
			if err := r.SetQueryParam("permissions", qPermissions); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
