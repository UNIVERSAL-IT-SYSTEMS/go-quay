package build

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new build API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
CancelRepoBuild Cancels a repository build if it has not yet been picked up by a build worker.
*/
func (a *Client) CancelRepoBuild(params *CancelRepoBuildParams, authInfo client.AuthInfoWriter) (*CancelRepoBuildNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelRepoBuildParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "cancelRepoBuild",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repository/{repository}/build/{build_uuid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelRepoBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelRepoBuildNoContent), nil
}

/*
GetRepoBuild Returns information about a build.
*/
func (a *Client) GetRepoBuild(params *GetRepoBuildParams, authInfo client.AuthInfoWriter) (*GetRepoBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepoBuildParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getRepoBuild",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/build/{build_uuid}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepoBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepoBuildOK), nil
}

/*
GetRepoBuildLogs Return the build logs for the build specified by the build uuid.
*/
func (a *Client) GetRepoBuildLogs(params *GetRepoBuildLogsParams, authInfo client.AuthInfoWriter) (*GetRepoBuildLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepoBuildLogsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getRepoBuildLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/build/{build_uuid}/logs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepoBuildLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepoBuildLogsOK), nil
}

/*
GetRepoBuildStatus Return the status for the builds specified by the build uuids.
*/
func (a *Client) GetRepoBuildStatus(params *GetRepoBuildStatusParams, authInfo client.AuthInfoWriter) (*GetRepoBuildStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepoBuildStatusParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getRepoBuildStatus",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/build/{build_uuid}/status",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepoBuildStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepoBuildStatusOK), nil
}

/*
GetRepoBuilds Get the list of repository builds.
*/
func (a *Client) GetRepoBuilds(params *GetRepoBuildsParams, authInfo client.AuthInfoWriter) (*GetRepoBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepoBuildsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getRepoBuilds",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/build/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRepoBuildsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepoBuildsOK), nil
}

/*
RequestRepoBuild Request that a repository be built and pushed from the specified input.
*/
func (a *Client) RequestRepoBuild(params *RequestRepoBuildParams, authInfo client.AuthInfoWriter) (*RequestRepoBuildCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestRepoBuildParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "requestRepoBuild",
		Method:             "POST",
		PathPattern:        "/api/v1/repository/{repository}/build/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestRepoBuildReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RequestRepoBuildCreated), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
