package build

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new build API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*Cancels a repository build if it has not yet been picked up by a build worker.
 */
func (a *Client) CancelRepoBuild(params CancelRepoBuildParams, authInfo client.AuthInfoWriter) (*CancelRepoBuildNoContent, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "cancelRepoBuild",
		Params:   &params,
		Reader:   &CancelRepoBuildReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelRepoBuildNoContent), nil
}

/*Returns information about a build.
 */
func (a *Client) GetRepoBuild(params GetRepoBuildParams, authInfo client.AuthInfoWriter) (*GetRepoBuildOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "getRepoBuild",
		Params:   &params,
		Reader:   &GetRepoBuildReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepoBuildOK), nil
}

/*Return the build logs for the build specified by the build uuid.
 */
func (a *Client) GetRepoBuildLogs(params GetRepoBuildLogsParams, authInfo client.AuthInfoWriter) (*GetRepoBuildLogsOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "getRepoBuildLogs",
		Params:   &params,
		Reader:   &GetRepoBuildLogsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepoBuildLogsOK), nil
}

/*Return the status for the builds specified by the build uuids.
 */
func (a *Client) GetRepoBuildStatus(params GetRepoBuildStatusParams, authInfo client.AuthInfoWriter) (*GetRepoBuildStatusOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "getRepoBuildStatus",
		Params:   &params,
		Reader:   &GetRepoBuildStatusReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepoBuildStatusOK), nil
}

/*Get the list of repository builds.
 */
func (a *Client) GetRepoBuilds(params GetRepoBuildsParams, authInfo client.AuthInfoWriter) (*GetRepoBuildsOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "getRepoBuilds",
		Params:   &params,
		Reader:   &GetRepoBuildsReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRepoBuildsOK), nil
}

/*Request that a repository be built and pushed from the specified input.
 */
func (a *Client) RequestRepoBuild(params RequestRepoBuildParams, authInfo client.AuthInfoWriter) (*RequestRepoBuildOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "requestRepoBuild",
		Params:   &params,
		Reader:   &RequestRepoBuildReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RequestRepoBuildOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
