package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

type GetImageReader struct {
	formats strfmt.Registry
}

func (o *GetImageReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetImageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetImageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetImageOK creates a GetImageOK with default headers values
func NewGetImageOK() *GetImageOK {
	return &GetImageOK{}
}

/*GetImageOK

Successful invocation
*/
type GetImageOK struct {
}

func (o *GetImageOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/image/{image_id}][%d] getImageOK ", 200)
}

func (o *GetImageOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetImageBadRequest creates a GetImageBadRequest with default headers values
func NewGetImageBadRequest() *GetImageBadRequest {
	return &GetImageBadRequest{}
}

/*GetImageBadRequest

Bad Request
*/
type GetImageBadRequest struct {
	Payload *models.GeneralError
}

func (o *GetImageBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/image/{image_id}][%d] getImageBadRequest  %+v", 400, o.Payload)
}

func (o *GetImageBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetImageUnauthorized creates a GetImageUnauthorized with default headers values
func NewGetImageUnauthorized() *GetImageUnauthorized {
	return &GetImageUnauthorized{}
}

/*GetImageUnauthorized

Session required
*/
type GetImageUnauthorized struct {
}

func (o *GetImageUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/image/{image_id}][%d] getImageUnauthorized ", 401)
}

func (o *GetImageUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetImageForbidden creates a GetImageForbidden with default headers values
func NewGetImageForbidden() *GetImageForbidden {
	return &GetImageForbidden{}
}

/*GetImageForbidden

Unauthorized access
*/
type GetImageForbidden struct {
}

func (o *GetImageForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/image/{image_id}][%d] getImageForbidden ", 403)
}

func (o *GetImageForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetImageNotFound creates a GetImageNotFound with default headers values
func NewGetImageNotFound() *GetImageNotFound {
	return &GetImageNotFound{}
}

/*GetImageNotFound

Not found
*/
type GetImageNotFound struct {
}

func (o *GetImageNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/image/{image_id}][%d] getImageNotFound ", 404)
}

func (o *GetImageNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
