package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new team API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for team API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*Delete the specified team.
 */
func (a *Client) DeleteOrganizationTeam(params DeleteOrganizationTeamParams, authInfo client.AuthInfoWriter) (*DeleteOrganizationTeamNoContent, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "deleteOrganizationTeam",
		Params:   &params,
		Reader:   &DeleteOrganizationTeamReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganizationTeamNoContent), nil
}

/*Delete a member of a team. If the user is merely invited to join
  the team, then the invite is removed instead.
*/
func (a *Client) DeleteOrganizationTeamMember(params DeleteOrganizationTeamMemberParams, authInfo client.AuthInfoWriter) (*DeleteOrganizationTeamMemberNoContent, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "deleteOrganizationTeamMember",
		Params:   &params,
		Reader:   &DeleteOrganizationTeamMemberReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganizationTeamMemberNoContent), nil
}

/*Delete an invite of an email address to join a team.
 */
func (a *Client) DeleteTeamMemberEmailInvite(params DeleteTeamMemberEmailInviteParams, authInfo client.AuthInfoWriter) (*DeleteTeamMemberEmailInviteNoContent, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "deleteTeamMemberEmailInvite",
		Params:   &params,
		Reader:   &DeleteTeamMemberEmailInviteReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamMemberEmailInviteNoContent), nil
}

/*Retrieve the list of members for the specified team.
 */
func (a *Client) GetOrganizationTeamMembers(params GetOrganizationTeamMembersParams, authInfo client.AuthInfoWriter) (*GetOrganizationTeamMembersOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "getOrganizationTeamMembers",
		Params:   &params,
		Reader:   &GetOrganizationTeamMembersReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationTeamMembersOK), nil
}

/*Invites an email address to an existing team.
 */
func (a *Client) InviteTeamMemberEmail(params InviteTeamMemberEmailParams, authInfo client.AuthInfoWriter) (*InviteTeamMemberEmailOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "inviteTeamMemberEmail",
		Params:   &params,
		Reader:   &InviteTeamMemberEmailReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InviteTeamMemberEmailOK), nil
}

/*Update the org-wide permission for the specified team.
 */
func (a *Client) UpdateOrganizationTeam(params UpdateOrganizationTeamParams, authInfo client.AuthInfoWriter) (*UpdateOrganizationTeamOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "updateOrganizationTeam",
		Params:   &params,
		Reader:   &UpdateOrganizationTeamReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateOrganizationTeamOK), nil
}

/*Adds or invites a member to an existing team.
 */
func (a *Client) UpdateOrganizationTeamMember(params UpdateOrganizationTeamMemberParams, authInfo client.AuthInfoWriter) (*UpdateOrganizationTeamMemberOK, error) {
	// TODO: Validate the params before sending

	result, err := a.transport.Submit(&client.Operation{
		ID:       "updateOrganizationTeamMember",
		Params:   &params,
		Reader:   &UpdateOrganizationTeamMemberReader{formats: a.formats},
		AuthInfo: authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateOrganizationTeamMemberOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
