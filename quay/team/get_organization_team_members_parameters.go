package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOrganizationTeamMembersParams creates a new GetOrganizationTeamMembersParams object
// with the default values initialized.
func NewGetOrganizationTeamMembersParams() *GetOrganizationTeamMembersParams {
	var ()
	return &GetOrganizationTeamMembersParams{}
}

/*GetOrganizationTeamMembersParams contains all the parameters to send to the API endpoint
for the get organization team members operation typically these are written to a http.Request
*/
type GetOrganizationTeamMembersParams struct {

	/*IncludePending
	  Whether to include pending members

	*/
	IncludePending *bool
	/*Orgname
	  The name of the organization

	*/
	Orgname string
	/*Teamname
	  The name of the team

	*/
	Teamname string
}

// WithIncludePending adds the includePending to the get organization team members params
func (o *GetOrganizationTeamMembersParams) WithIncludePending(IncludePending *bool) *GetOrganizationTeamMembersParams {
	o.IncludePending = IncludePending
	return o
}

// WithOrgname adds the orgname to the get organization team members params
func (o *GetOrganizationTeamMembersParams) WithOrgname(Orgname string) *GetOrganizationTeamMembersParams {
	o.Orgname = Orgname
	return o
}

// WithTeamname adds the teamname to the get organization team members params
func (o *GetOrganizationTeamMembersParams) WithTeamname(Teamname string) *GetOrganizationTeamMembersParams {
	o.Teamname = Teamname
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationTeamMembersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	if o.IncludePending != nil {

		// query param includePending
		var qrIncludePending bool
		if o.IncludePending != nil {
			qrIncludePending = *o.IncludePending
		}
		qIncludePending := swag.FormatBool(qrIncludePending)
		if qIncludePending != "" {
			if err := r.SetQueryParam("includePending", qIncludePending); err != nil {
				return err
			}
		}

	}

	// path param orgname
	if err := r.SetPathParam("orgname", o.Orgname); err != nil {
		return err
	}

	// path param teamname
	if err := r.SetPathParam("teamname", o.Teamname); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
