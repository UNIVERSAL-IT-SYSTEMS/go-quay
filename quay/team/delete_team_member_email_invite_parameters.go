package team

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/strfmt"
)

// NewDeleteTeamMemberEmailInviteParams creates a new DeleteTeamMemberEmailInviteParams object
// with the default values initialized.
func NewDeleteTeamMemberEmailInviteParams() *DeleteTeamMemberEmailInviteParams {
	var ()
	return &DeleteTeamMemberEmailInviteParams{}
}

/*DeleteTeamMemberEmailInviteParams contains all the parameters to send to the API endpoint
for the delete team member email invite operation typically these are written to a http.Request
*/
type DeleteTeamMemberEmailInviteParams struct {

	/*Email*/
	Email string
	/*Orgname*/
	Orgname string
	/*Teamname*/
	Teamname string
}

// WithEmail adds the email to the delete team member email invite params
func (o *DeleteTeamMemberEmailInviteParams) WithEmail(email string) *DeleteTeamMemberEmailInviteParams {
	o.Email = email
	return o
}

// WithOrgname adds the orgname to the delete team member email invite params
func (o *DeleteTeamMemberEmailInviteParams) WithOrgname(orgname string) *DeleteTeamMemberEmailInviteParams {
	o.Orgname = orgname
	return o
}

// WithTeamname adds the teamname to the delete team member email invite params
func (o *DeleteTeamMemberEmailInviteParams) WithTeamname(teamname string) *DeleteTeamMemberEmailInviteParams {
	o.Teamname = teamname
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteTeamMemberEmailInviteParams) WriteToRequest(r client.Request, reg strfmt.Registry) error {

	var res []error

	// path param email
	if err := r.SetPathParam("email", o.Email); err != nil {
		return err
	}

	// path param orgname
	if err := r.SetPathParam("orgname", o.Orgname); err != nil {
		return err
	}

	// path param teamname
	if err := r.SetPathParam("teamname", o.Teamname); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
