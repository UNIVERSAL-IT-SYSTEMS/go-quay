package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

type ListOrgLogsReader struct {
	formats strfmt.Registry
}

func (o *ListOrgLogsReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		var result ListOrgLogsOK
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return &result, nil

	case 400:
		var result ListOrgLogsBadRequest
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("listOrgLogsBadRequest", &result, response.Code())

	case 401:
		var result ListOrgLogsUnauthorized
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("listOrgLogsUnauthorized", &result, response.Code())

	case 403:
		var result ListOrgLogsForbidden
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("listOrgLogsForbidden", &result, response.Code())

	case 404:
		var result ListOrgLogsNotFound
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("listOrgLogsNotFound", &result, response.Code())

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

/*ListOrgLogsOK

Successful invocation
*/
type ListOrgLogsOK struct {
}

func (o *ListOrgLogsOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*ListOrgLogsBadRequest

Bad Request
*/
type ListOrgLogsBadRequest struct {
	Payload *models.GeneralError
}

func (o *ListOrgLogsBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

/*ListOrgLogsUnauthorized

Session required
*/
type ListOrgLogsUnauthorized struct {
}

func (o *ListOrgLogsUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*ListOrgLogsForbidden

Unauthorized access
*/
type ListOrgLogsForbidden struct {
}

func (o *ListOrgLogsForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*ListOrgLogsNotFound

Not found
*/
type ListOrgLogsNotFound struct {
}

func (o *ListOrgLogsNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
