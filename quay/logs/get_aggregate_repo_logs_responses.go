package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

type GetAggregateRepoLogsReader struct {
	formats strfmt.Registry
}

func (o *GetAggregateRepoLogsReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAggregateRepoLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAggregateRepoLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAggregateRepoLogsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetAggregateRepoLogsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAggregateRepoLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAggregateRepoLogsOK creates a GetAggregateRepoLogsOK with default headers values
func NewGetAggregateRepoLogsOK() *GetAggregateRepoLogsOK {
	return &GetAggregateRepoLogsOK{}
}

/*GetAggregateRepoLogsOK

Successful invocation
*/
type GetAggregateRepoLogsOK struct {
}

func (o *GetAggregateRepoLogsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/aggregatelogs][%d] getAggregateRepoLogsOK ", 200)
}

func (o *GetAggregateRepoLogsOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAggregateRepoLogsBadRequest creates a GetAggregateRepoLogsBadRequest with default headers values
func NewGetAggregateRepoLogsBadRequest() *GetAggregateRepoLogsBadRequest {
	return &GetAggregateRepoLogsBadRequest{}
}

/*GetAggregateRepoLogsBadRequest

Bad Request
*/
type GetAggregateRepoLogsBadRequest struct {
	Payload *models.GeneralError
}

func (o *GetAggregateRepoLogsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/aggregatelogs][%d] getAggregateRepoLogsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAggregateRepoLogsBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAggregateRepoLogsUnauthorized creates a GetAggregateRepoLogsUnauthorized with default headers values
func NewGetAggregateRepoLogsUnauthorized() *GetAggregateRepoLogsUnauthorized {
	return &GetAggregateRepoLogsUnauthorized{}
}

/*GetAggregateRepoLogsUnauthorized

Session required
*/
type GetAggregateRepoLogsUnauthorized struct {
}

func (o *GetAggregateRepoLogsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/aggregatelogs][%d] getAggregateRepoLogsUnauthorized ", 401)
}

func (o *GetAggregateRepoLogsUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAggregateRepoLogsForbidden creates a GetAggregateRepoLogsForbidden with default headers values
func NewGetAggregateRepoLogsForbidden() *GetAggregateRepoLogsForbidden {
	return &GetAggregateRepoLogsForbidden{}
}

/*GetAggregateRepoLogsForbidden

Unauthorized access
*/
type GetAggregateRepoLogsForbidden struct {
}

func (o *GetAggregateRepoLogsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/aggregatelogs][%d] getAggregateRepoLogsForbidden ", 403)
}

func (o *GetAggregateRepoLogsForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAggregateRepoLogsNotFound creates a GetAggregateRepoLogsNotFound with default headers values
func NewGetAggregateRepoLogsNotFound() *GetAggregateRepoLogsNotFound {
	return &GetAggregateRepoLogsNotFound{}
}

/*GetAggregateRepoLogsNotFound

Not found
*/
type GetAggregateRepoLogsNotFound struct {
}

func (o *GetAggregateRepoLogsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/aggregatelogs][%d] getAggregateRepoLogsNotFound ", 404)
}

func (o *GetAggregateRepoLogsNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
