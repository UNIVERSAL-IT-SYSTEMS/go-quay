package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

type GetOrganizationReader struct {
	formats strfmt.Registry
}

func (o *GetOrganizationReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		var result GetOrganizationOK
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return &result, nil

	case 400:
		var result GetOrganizationBadRequest
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("getOrganizationBadRequest", &result, response.Code())

	case 401:
		var result GetOrganizationUnauthorized
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("getOrganizationUnauthorized", &result, response.Code())

	case 403:
		var result GetOrganizationForbidden
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("getOrganizationForbidden", &result, response.Code())

	case 404:
		var result GetOrganizationNotFound
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("getOrganizationNotFound", &result, response.Code())

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

/*GetOrganizationOK

Successful invocation
*/
type GetOrganizationOK struct {
}

func (o *GetOrganizationOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetOrganizationBadRequest

Bad Request
*/
type GetOrganizationBadRequest struct {
	Payload *models.GeneralError
}

func (o *GetOrganizationBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

/*GetOrganizationUnauthorized

Session required
*/
type GetOrganizationUnauthorized struct {
}

func (o *GetOrganizationUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetOrganizationForbidden

Unauthorized access
*/
type GetOrganizationForbidden struct {
}

func (o *GetOrganizationForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetOrganizationNotFound

Not found
*/
type GetOrganizationNotFound struct {
}

func (o *GetOrganizationNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
