package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new organization API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
Change the details for the specified organization.
*/
func (a *Client) ChangeOrganizationDetails(params *ChangeOrganizationDetailsParams, authInfo client.AuthInfoWriter) (*ChangeOrganizationDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeOrganizationDetailsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "changeOrganizationDetails",
		Method:             "PUT",
		PathPattern:        "/api/v1/organization/{orgname}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeOrganizationDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeOrganizationDetailsOK), nil
}

/*
Creates a new application under this organization.
*/
func (a *Client) CreateOrganizationApplication(params *CreateOrganizationApplicationParams, authInfo client.AuthInfoWriter) (*CreateOrganizationApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationApplicationParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "createOrganizationApplication",
		Method:             "POST",
		PathPattern:        "/api/v1/organization/{orgname}/applications",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOrganizationApplicationOK), nil
}

/*
Deletes the application under this organization.
*/
func (a *Client) DeleteOrganizationApplication(params *DeleteOrganizationApplicationParams, authInfo client.AuthInfoWriter) (*DeleteOrganizationApplicationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationApplicationParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "deleteOrganizationApplication",
		Method:             "DELETE",
		PathPattern:        "/api/v1/organization/{orgname}/applications/{client_id}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrganizationApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganizationApplicationNoContent), nil
}

/*
Get information on the specified application.
*/
func (a *Client) GetApplicationInformation(params *GetApplicationInformationParams) (*GetApplicationInformationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationInformationParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getApplicationInformation",
		Method:             "GET",
		PathPattern:        "/api/v1/app/{client_id}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetApplicationInformationReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApplicationInformationOK), nil
}

/*
Get the details for the specified organization
*/
func (a *Client) GetOrganization(params *GetOrganizationParams, authInfo client.AuthInfoWriter) (*GetOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getOrganization",
		Method:             "GET",
		PathPattern:        "/api/v1/organization/{orgname}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationOK), nil
}

/*
Retrieves the application with the specified client_id under the specified organization
*/
func (a *Client) GetOrganizationApplication(params *GetOrganizationApplicationParams, authInfo client.AuthInfoWriter) (*GetOrganizationApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationApplicationParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getOrganizationApplication",
		Method:             "GET",
		PathPattern:        "/api/v1/organization/{orgname}/applications/{client_id}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationApplicationOK), nil
}

/*
List the applications for the specified organization
*/
func (a *Client) GetOrganizationApplications(params *GetOrganizationApplicationsParams, authInfo client.AuthInfoWriter) (*GetOrganizationApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationApplicationsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getOrganizationApplications",
		Method:             "GET",
		PathPattern:        "/api/v1/organization/{orgname}/applications",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationApplicationsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationApplicationsOK), nil
}

/*
Retrieves the details of a member of the organization.
*/
func (a *Client) GetOrganizationMember(params *GetOrganizationMemberParams, authInfo client.AuthInfoWriter) (*GetOrganizationMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationMemberParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getOrganizationMember",
		Method:             "GET",
		PathPattern:        "/api/v1/organization/{orgname}/members/{membername}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationMemberOK), nil
}

/*
List the human members of the specified organization.
*/
func (a *Client) GetOrganizationMembers(params *GetOrganizationMembersParams, authInfo client.AuthInfoWriter) (*GetOrganizationMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationMembersParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getOrganizationMembers",
		Method:             "GET",
		PathPattern:        "/api/v1/organization/{orgname}/members",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationMembersOK), nil
}

/*
Removes a member from an organization, revoking all its repository
        priviledges and removing it from all teams in the organization.
*/
func (a *Client) RemoveOrganizationMember(params *RemoveOrganizationMemberParams, authInfo client.AuthInfoWriter) (*RemoveOrganizationMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveOrganizationMemberParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "removeOrganizationMember",
		Method:             "DELETE",
		PathPattern:        "/api/v1/organization/{orgname}/members/{membername}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveOrganizationMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveOrganizationMemberNoContent), nil
}

/*
Updates an application under this organization.
*/
func (a *Client) UpdateOrganizationApplication(params *UpdateOrganizationApplicationParams, authInfo client.AuthInfoWriter) (*UpdateOrganizationApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationApplicationParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "updateOrganizationApplication",
		Method:             "PUT",
		PathPattern:        "/api/v1/organization/{orgname}/applications/{client_id}",
		ProducesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateOrganizationApplicationOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response      interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}
