package permission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

type DeleteUserPermissionsReader struct {
	formats strfmt.Registry
}

func (o *DeleteUserPermissionsReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		var result DeleteUserPermissionsNoContent
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return &result, nil

	case 400:
		var result DeleteUserPermissionsBadRequest
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("deleteUserPermissionsBadRequest", &result, response.Code())

	case 401:
		var result DeleteUserPermissionsUnauthorized
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("deleteUserPermissionsUnauthorized", &result, response.Code())

	case 403:
		var result DeleteUserPermissionsForbidden
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("deleteUserPermissionsForbidden", &result, response.Code())

	case 404:
		var result DeleteUserPermissionsNotFound
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, NewAPIError("deleteUserPermissionsNotFound", &result, response.Code())

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

/*DeleteUserPermissionsNoContent

Deleted
*/
type DeleteUserPermissionsNoContent struct {
}

func (o *DeleteUserPermissionsNoContent) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeleteUserPermissionsBadRequest

Bad Request
*/
type DeleteUserPermissionsBadRequest struct {
	Payload *models.GeneralError
}

func (o *DeleteUserPermissionsBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil {
		return err
	}

	return nil
}

/*DeleteUserPermissionsUnauthorized

Session required
*/
type DeleteUserPermissionsUnauthorized struct {
}

func (o *DeleteUserPermissionsUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeleteUserPermissionsForbidden

Unauthorized access
*/
type DeleteUserPermissionsForbidden struct {
}

func (o *DeleteUserPermissionsForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DeleteUserPermissionsNotFound

Not found
*/
type DeleteUserPermissionsNotFound struct {
}

func (o *DeleteUserPermissionsNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
