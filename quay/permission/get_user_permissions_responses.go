package permission

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

type GetUserPermissionsReader struct {
	formats strfmt.Registry
}

func (o *GetUserPermissionsReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetUserPermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetUserPermissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetUserPermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetUserPermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetUserPermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUserPermissionsOK creates a GetUserPermissionsOK with default headers values
func NewGetUserPermissionsOK() *GetUserPermissionsOK {
	return &GetUserPermissionsOK{}
}

/*GetUserPermissionsOK

Successful invocation
*/
type GetUserPermissionsOK struct {
}

func (o *GetUserPermissionsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}][%d] getUserPermissionsOK ", 200)
}

func (o *GetUserPermissionsOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserPermissionsBadRequest creates a GetUserPermissionsBadRequest with default headers values
func NewGetUserPermissionsBadRequest() *GetUserPermissionsBadRequest {
	return &GetUserPermissionsBadRequest{}
}

/*GetUserPermissionsBadRequest

Bad Request
*/
type GetUserPermissionsBadRequest struct {
	Payload *models.GeneralError
}

func (o *GetUserPermissionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}][%d] getUserPermissionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserPermissionsBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserPermissionsUnauthorized creates a GetUserPermissionsUnauthorized with default headers values
func NewGetUserPermissionsUnauthorized() *GetUserPermissionsUnauthorized {
	return &GetUserPermissionsUnauthorized{}
}

/*GetUserPermissionsUnauthorized

Session required
*/
type GetUserPermissionsUnauthorized struct {
}

func (o *GetUserPermissionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}][%d] getUserPermissionsUnauthorized ", 401)
}

func (o *GetUserPermissionsUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserPermissionsForbidden creates a GetUserPermissionsForbidden with default headers values
func NewGetUserPermissionsForbidden() *GetUserPermissionsForbidden {
	return &GetUserPermissionsForbidden{}
}

/*GetUserPermissionsForbidden

Unauthorized access
*/
type GetUserPermissionsForbidden struct {
}

func (o *GetUserPermissionsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}][%d] getUserPermissionsForbidden ", 403)
}

func (o *GetUserPermissionsForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUserPermissionsNotFound creates a GetUserPermissionsNotFound with default headers values
func NewGetUserPermissionsNotFound() *GetUserPermissionsNotFound {
	return &GetUserPermissionsNotFound{}
}

/*GetUserPermissionsNotFound

Not found
*/
type GetUserPermissionsNotFound struct {
}

func (o *GetUserPermissionsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/repository/{repository}/permissions/user/{username}][%d] getUserPermissionsNotFound ", 404)
}

func (o *GetUserPermissionsNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
