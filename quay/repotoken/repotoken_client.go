package repotoken

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new repotoken API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repotoken API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
ChangeToken Update the permissions for the specified repository token.
*/
func (a *Client) ChangeToken(params *ChangeTokenParams, authInfo client.AuthInfoWriter) (*ChangeTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeTokenParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "changeToken",
		Method:             "PUT",
		PathPattern:        "/api/v1/repository/{repository}/tokens/{code}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeTokenOK), nil
}

/*
CreateToken Create a new repository token.
*/
func (a *Client) CreateToken(params *CreateTokenParams, authInfo client.AuthInfoWriter) (*CreateTokenCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTokenParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "createToken",
		Method:             "POST",
		PathPattern:        "/api/v1/repository/{repository}/tokens/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateTokenCreated), nil
}

/*
DeleteToken Delete the repository token.
*/
func (a *Client) DeleteToken(params *DeleteTokenParams, authInfo client.AuthInfoWriter) (*DeleteTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTokenParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "deleteToken",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repository/{repository}/tokens/{code}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTokenNoContent), nil
}

/*
GetTokens Fetch the specified repository token information.
*/
func (a *Client) GetTokens(params *GetTokensParams, authInfo client.AuthInfoWriter) (*GetTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokensParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getTokens",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/tokens/{code}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTokensOK), nil
}

/*
ListRepoTokens List the tokens for the specified repository.
*/
func (a *Client) ListRepoTokens(params *ListRepoTokensParams, authInfo client.AuthInfoWriter) (*ListRepoTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepoTokensParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "listRepoTokens",
		Method:             "GET",
		PathPattern:        "/api/v1/repository/{repository}/tokens/",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRepoTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRepoTokensOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
