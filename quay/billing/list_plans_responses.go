package billing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

// ListPlansReader is a Reader for the ListPlans structure.
type ListPlansReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *ListPlansReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListPlansOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListPlansBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListPlansUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListPlansForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListPlansNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewListPlansOK creates a ListPlansOK with default headers values
func NewListPlansOK() *ListPlansOK {
	return &ListPlansOK{}
}

/*ListPlansOK handles this case with default header values.

Successful invocation
*/
type ListPlansOK struct {
}

func (o *ListPlansOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/plans/][%d] listPlansOK ", 200)
}

func (o *ListPlansOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListPlansBadRequest creates a ListPlansBadRequest with default headers values
func NewListPlansBadRequest() *ListPlansBadRequest {
	return &ListPlansBadRequest{}
}

/*ListPlansBadRequest handles this case with default header values.

Bad Request
*/
type ListPlansBadRequest struct {
	Payload *models.GeneralError
}

func (o *ListPlansBadRequest) Error() string {
	return fmt.Sprintf("[GET /api/v1/plans/][%d] listPlansBadRequest  %+v", 400, o.Payload)
}

func (o *ListPlansBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPlansUnauthorized creates a ListPlansUnauthorized with default headers values
func NewListPlansUnauthorized() *ListPlansUnauthorized {
	return &ListPlansUnauthorized{}
}

/*ListPlansUnauthorized handles this case with default header values.

Session required
*/
type ListPlansUnauthorized struct {
}

func (o *ListPlansUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/plans/][%d] listPlansUnauthorized ", 401)
}

func (o *ListPlansUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListPlansForbidden creates a ListPlansForbidden with default headers values
func NewListPlansForbidden() *ListPlansForbidden {
	return &ListPlansForbidden{}
}

/*ListPlansForbidden handles this case with default header values.

Unauthorized access
*/
type ListPlansForbidden struct {
}

func (o *ListPlansForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/plans/][%d] listPlansForbidden ", 403)
}

func (o *ListPlansForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListPlansNotFound creates a ListPlansNotFound with default headers values
func NewListPlansNotFound() *ListPlansNotFound {
	return &ListPlansNotFound{}
}

/*ListPlansNotFound handles this case with default header values.

Not found
*/
type ListPlansNotFound struct {
}

func (o *ListPlansNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/plans/][%d] listPlansNotFound ", 404)
}

func (o *ListPlansNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
