package tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListRepoTagsParams creates a new ListRepoTagsParams object
// with the default values initialized.
func NewListRepoTagsParams() *ListRepoTagsParams {
	var ()
	return &ListRepoTagsParams{}
}

/*ListRepoTagsParams contains all the parameters to send to the API endpoint
for the list repo tags operation typically these are written to a http.Request
*/
type ListRepoTagsParams struct {

	/*Limit
	  Limit to the number of results to return per page. Max 100.

	*/
	Limit *int64
	/*Page
	  Page index for the results. Default 1.

	*/
	Page *int64
	/*Repository
	  The full path of the repository. e.g. namespace/name

	*/
	Repository string
	/*SpecificTag
	  Filters the tags to the specific tag.

	*/
	SpecificTag *string
}

// WithLimit adds the limit to the list repo tags params
func (o *ListRepoTagsParams) WithLimit(Limit *int64) *ListRepoTagsParams {
	o.Limit = Limit
	return o
}

// WithPage adds the page to the list repo tags params
func (o *ListRepoTagsParams) WithPage(Page *int64) *ListRepoTagsParams {
	o.Page = Page
	return o
}

// WithRepository adds the repository to the list repo tags params
func (o *ListRepoTagsParams) WithRepository(Repository string) *ListRepoTagsParams {
	o.Repository = Repository
	return o
}

// WithSpecificTag adds the specificTag to the list repo tags params
func (o *ListRepoTagsParams) WithSpecificTag(SpecificTag *string) *ListRepoTagsParams {
	o.SpecificTag = SpecificTag
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *ListRepoTagsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	// path param repository
	if err := r.SetPathParam("repository", o.Repository); err != nil {
		return err
	}

	if o.SpecificTag != nil {

		// query param specificTag
		var qrSpecificTag string
		if o.SpecificTag != nil {
			qrSpecificTag = *o.SpecificTag
		}
		qSpecificTag := qrSpecificTag
		if qSpecificTag != "" {
			if err := r.SetQueryParam("specificTag", qSpecificTag); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
