package tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/coreos/go-quay/models"
)

// NewChangeTagImageParams creates a new ChangeTagImageParams object
// with the default values initialized.
func NewChangeTagImageParams() *ChangeTagImageParams {
	var ()
	return &ChangeTagImageParams{}
}

/*ChangeTagImageParams contains all the parameters to send to the API endpoint
for the change tag image operation typically these are written to a http.Request
*/
type ChangeTagImageParams struct {

	/*Body
	  Request body contents.

	*/
	Body *models.MoveTag
	/*Repository
	  The full path of the repository. e.g. namespace/name

	*/
	Repository string
	/*Tag
	  The name of the tag

	*/
	Tag string
}

// WithBody adds the body to the change tag image params
func (o *ChangeTagImageParams) WithBody(Body *models.MoveTag) *ChangeTagImageParams {
	o.Body = Body
	return o
}

// WithRepository adds the repository to the change tag image params
func (o *ChangeTagImageParams) WithRepository(Repository string) *ChangeTagImageParams {
	o.Repository = Repository
	return o
}

// WithTag adds the tag to the change tag image params
func (o *ChangeTagImageParams) WithTag(Tag string) *ChangeTagImageParams {
	o.Tag = Tag
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *ChangeTagImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	if o.Body == nil {
		o.Body = new(models.MoveTag)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param repository
	if err := r.SetPathParam("repository", o.Repository); err != nil {
		return err
	}

	// path param tag
	if err := r.SetPathParam("tag", o.Tag); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
