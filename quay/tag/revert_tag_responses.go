package tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/strfmt"

	"github.com/coreos/go-quay/models"
)

// RevertTagReader is a Reader for the RevertTag structure.
type RevertTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *RevertTagReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRevertTagOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRevertTagBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewRevertTagUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewRevertTagForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRevertTagNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, NewAPIError("unknown error", response, response.Code())
	}
}

// NewRevertTagOK creates a RevertTagOK with default headers values
func NewRevertTagOK() *RevertTagOK {
	return &RevertTagOK{}
}

/*RevertTagOK handles this case with default header values.

Successful invocation
*/
type RevertTagOK struct {
}

func (o *RevertTagOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/tag/{tag}/revert][%d] revertTagOK ", 200)
}

func (o *RevertTagOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevertTagBadRequest creates a RevertTagBadRequest with default headers values
func NewRevertTagBadRequest() *RevertTagBadRequest {
	return &RevertTagBadRequest{}
}

/*RevertTagBadRequest handles this case with default header values.

Bad Request
*/
type RevertTagBadRequest struct {
	Payload *models.GeneralError
}

func (o *RevertTagBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/tag/{tag}/revert][%d] revertTagBadRequest  %+v", 400, o.Payload)
}

func (o *RevertTagBadRequest) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GeneralError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevertTagUnauthorized creates a RevertTagUnauthorized with default headers values
func NewRevertTagUnauthorized() *RevertTagUnauthorized {
	return &RevertTagUnauthorized{}
}

/*RevertTagUnauthorized handles this case with default header values.

Session required
*/
type RevertTagUnauthorized struct {
}

func (o *RevertTagUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/tag/{tag}/revert][%d] revertTagUnauthorized ", 401)
}

func (o *RevertTagUnauthorized) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevertTagForbidden creates a RevertTagForbidden with default headers values
func NewRevertTagForbidden() *RevertTagForbidden {
	return &RevertTagForbidden{}
}

/*RevertTagForbidden handles this case with default header values.

Unauthorized access
*/
type RevertTagForbidden struct {
}

func (o *RevertTagForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/tag/{tag}/revert][%d] revertTagForbidden ", 403)
}

func (o *RevertTagForbidden) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevertTagNotFound creates a RevertTagNotFound with default headers values
func NewRevertTagNotFound() *RevertTagNotFound {
	return &RevertTagNotFound{}
}

/*RevertTagNotFound handles this case with default header values.

Not found
*/
type RevertTagNotFound struct {
}

func (o *RevertTagNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/repository/{repository}/tag/{tag}/revert][%d] revertTagNotFound ", 404)
}

func (o *RevertTagNotFound) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}
