package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*APIError Api error

swagger:model ApiError
*/
type APIError struct {

	/* Details about the specific instance of the error.
	 */
	Detail string `json:"detail,omitempty"`

	/* Deprecated; alias for detail
	 */
	ErrorMessage string `json:"error_message,omitempty"`

	/* Deprecated; alias for detail
	 */
	ErrorType string `json:"error_type,omitempty"`

	/* Status code of the response.

	Required: true
	*/
	Status *int64 `json:"status"`

	/* Unique error code to identify the type of error.

	Required: true
	*/
	Title *string `json:"title"`

	/* Reference to the type of the error.

	Required: true
	*/
	Type *string `json:"type"`
}

// Validate validates this Api error
func (m *APIError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIError) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *APIError) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *APIError) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
