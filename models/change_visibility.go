package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*ChangeVisibility Change the visibility for the repository.

swagger:model ChangeVisibility
*/
type ChangeVisibility struct {

	/* Visibility which the repository will start with

	Required: true
	*/
	Visibility *string `json:"visibility"`
}

// Validate validates this change visibility
func (m *ChangeVisibility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVisibility(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var changeVisibilityTypeVisibilityPropEnum []interface{}

// prop value enum
func (m *ChangeVisibility) validateVisibilityEnum(path, location string, value string) error {
	if changeVisibilityTypeVisibilityPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["public","private"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			changeVisibilityTypeVisibilityPropEnum = append(changeVisibilityTypeVisibilityPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, changeVisibilityTypeVisibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ChangeVisibility) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}
