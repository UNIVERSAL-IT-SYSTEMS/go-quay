package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*APIErrorDescription Description of an error

swagger:model ApiErrorDescription
*/
type APIErrorDescription struct {

	/* A more detailed description of the error that may include help for fixing the issue.

	Required: true
	*/
	Description *string `json:"description"`

	/* The title of the error. Can be used to uniquely identify the kind of error.

	Required: true
	*/
	Title *string `json:"title"`

	/* A reference to the error type resource

	Required: true
	*/
	Type *string `json:"type"`
}

// Validate validates this Api error description
func (m *APIErrorDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIErrorDescription) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

var apiErrorDescriptionTypeTitlePropEnum []interface{}

// prop value enum
func (m *APIErrorDescription) validateTitleEnum(path, location string, value string) error {
	if apiErrorDescriptionTypeTitlePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["downstream_issue","exceeds_license","expired_token","external_service_timeout","fresh_login_required","insufficient_scope","invalid_request","invalid_response","invalid_token","not_found"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			apiErrorDescriptionTypeTitlePropEnum = append(apiErrorDescriptionTypeTitlePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, apiErrorDescriptionTypeTitlePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *APIErrorDescription) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	// value enum
	if err := m.validateTitleEnum("title", "body", *m.Title); err != nil {
		return err
	}

	return nil
}

func (m *APIErrorDescription) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
