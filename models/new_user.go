package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*Fields which must be specified for a new user.

swagger:model NewUser
*/
type NewUser struct {

	/* The user's email address

	Required: true
	*/
	Email string `json:"email,omitempty"`

	/* The optional invite code
	 */
	InviteCode string `json:"invite_code,omitempty"`

	/* The user's password

	Required: true
	*/
	Password string `json:"password,omitempty"`

	/* The user's username

	Required: true
	*/
	Username string `json:"username,omitempty"`
}

// Validate validates this new user
func (m *NewUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewUser) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", string(m.Email)); err != nil {
		return err
	}

	return nil
}

func (m *NewUser) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", string(m.Password)); err != nil {
		return err
	}

	return nil
}

func (m *NewUser) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", string(m.Username)); err != nil {
		return err
	}

	return nil
}
