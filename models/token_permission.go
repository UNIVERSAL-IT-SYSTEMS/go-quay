package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*TokenPermission Description of a token permission

swagger:model TokenPermission
*/
type TokenPermission struct {

	/* Role to use for the token

	Required: true
	*/
	Role string `json:"role,omitempty"`
}

// Validate validates this token permission
func (m *TokenPermission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tokenPermissionRoleEnum []interface{}

func (m *TokenPermission) validateRoleEnum(path, location string, value string) error {
	if tokenPermissionRoleEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["read","write","admin"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			tokenPermissionRoleEnum = append(tokenPermissionRoleEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, tokenPermissionRoleEnum); err != nil {
		return err
	}
	return nil
}

func (m *TokenPermission) validateRole(formats strfmt.Registry) error {

	if err := validate.RequiredString("role", "body", string(m.Role)); err != nil {
		return err
	}

	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}
