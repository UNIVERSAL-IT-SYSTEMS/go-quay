package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*NewRepo Description of a new repository

swagger:model NewRepo
*/
type NewRepo struct {

	/* Markdown encoded description for the repository

	Required: true
	*/
	Description *string `json:"description"`

	/* Namespace in which the repository should be created. If omitted, the username of the caller is used
	 */
	Namespace string `json:"namespace,omitempty"`

	/* Repository name

	Required: true
	*/
	Repository *string `json:"repository"`

	/* Visibility which the repository will start with

	Required: true
	*/
	Visibility *string `json:"visibility"`
}

// Validate validates this new repo
func (m *NewRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewRepo) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *NewRepo) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	return nil
}

var newRepoTypeVisibilityPropEnum []interface{}

// prop value enum
func (m *NewRepo) validateVisibilityEnum(path, location string, value string) error {
	if newRepoTypeVisibilityPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["public","private"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			newRepoTypeVisibilityPropEnum = append(newRepoTypeVisibilityPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, newRepoTypeVisibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NewRepo) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}
