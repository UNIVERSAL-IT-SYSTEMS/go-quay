package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

/*Describes a user

swagger:model UserView
*/
type UserView struct {

	/* true if this user data represents a guest user

	Required: true
	*/
	Anonymous bool `json:"anonymous,omitempty"`

	/* Avatar data representing the user's icon

	Required: true
	*/
	Avatar interface{} `json:"avatar,omitempty"`

	/* Whether the user has permission to create repositories
	 */
	CanCreateRepo bool `json:"can_create_repo,omitempty"`

	/* The user's email address
	 */
	Email string `json:"email,omitempty"`

	/* The list of external login providers against which the user has authenticated
	 */
	Logins []interface{} `json:"logins,omitempty"`

	/* Information about the organizations in which the user is a member
	 */
	Organizations []interface{} `json:"organizations,omitempty"`

	/* If true, the user's namespace is the preferred namespace to display
	 */
	PreferredNamespace bool `json:"preferred_namespace,omitempty"`

	/* Whether the user's email address has been verified

	Required: true
	*/
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this user view
func (m *UserView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnonymous(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAvatar(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVerified(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserView) validateAnonymous(formats strfmt.Registry) error {

	if err := validate.Required("anonymous", "body", bool(m.Anonymous)); err != nil {
		return err
	}

	return nil
}

func (m *UserView) validateAvatar(formats strfmt.Registry) error {

	return nil
}

func (m *UserView) validateVerified(formats strfmt.Registry) error {

	if err := validate.Required("verified", "body", bool(m.Verified)); err != nil {
		return err
	}

	return nil
}
